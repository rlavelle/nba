# -*- coding: utf-8 -*-"""Spyder EditorThis is a temporary script file."""#%%import pandas as pdimport jsonimport osimport numpy as npfrom datetime import datetime#%%ROOT = '/Users/rowanlavelle/Documents/Projects/nba/'BASDIR = ROOT+'data/'#%%SEASON_TYPE_MAP = {    'Regular Season': '00',    'Playoffs': '01',    'All-Star': '02',    'Preseason': '03',    'Summer League': '04',    'PlayIn': '05',    'IST Championship': '06'}def fmt_player_data(player):    return {        'player_id': player['personId'],        'player_name': player['firstName'] + ' ' + player['familyName'],        'player_slug': player['playerSlug']    }def fmt_stats_data(stats, game_id, player_id, team_id, position):    return {        'player_id': player_id,        'team_id': team_id,        'game_id': game_id,        'position': position,        **stats    }def fmt_game_data(game, date, game_id):    return {        'game_id': game_id,        'season': game['meta']['season_yr'],        'season_type': game['meta']['season_type'],        'season_type_code': SEASON_TYPE_MAP[game['meta']['season_type']],        'dint': date,        'date': datetime.strptime(str(date), '%Y%m%d'),       }def fmt_team_data(team):    return {        'team_id': team['teamId'],        'team_name': team['teamName'],        'team_slug': team['teamTricode']    }def is_bad_game(game):    return not ('home' in game and game['home'] and 'away' in game and game['away'])#%%def parse_dumped_game_data(game_dir, date, game_id):    stat_files = os.listdir(game_dir)        game_meta = None    seen_players = set()    player_stats_dict = {}    game_stats_dict = {}    player_data = []    team_data = []        for stat_file in stat_files:        fpath = os.path.join(game_dir, stat_file)        j = json.load(open(fpath))                if 'meta' in stat_file:            if is_bad_game(j):                continue                        game_meta = fmt_game_data(j, date, game_id)                        for side in ['home', 'away']:                team = j[side]                team_data.append(fmt_team_data(team))                    else:            for side in ['homeTeam', 'awayTeam']:                team = j[side]                players = team['players']                team_id = team['teamId']                is_home = side == 'homeTeam'                                                # game stats                if 'usage' not in stat_file:                    for stat_type in ['statistics', 'starters', 'bench']:                        if stat_type not in team:                            continue                                                key = str(game_id) + '_' + str(team_id) + '_' + stat_type                        if key in game_stats_dict:                            game_stats_dict[key] = team[stat_type] | game_stats_dict[key]                        else:                            game_stats_dict[key] = team[stat_type]                                                    game_stats_dict[key]['game_id'] = game_id                        game_stats_dict[key]['team_id'] = team_id                        game_stats_dict[key]['is_home'] = is_home                        game_stats_dict[key]['stat_type'] = stat_type                                    # player stats                for player in players:                    pdata = fmt_player_data(player)                                        if 'statistics' not in player:                        continue                                        pid = pdata['player_id']                                            if pid not in seen_players:                        seen_players.add(pid)                        player_data.append(pdata)                                        player_stat_data = fmt_stats_data(player['statistics'], game_id, pid, team_id, player['position'])                                                            if pid in player_stats_dict:                        player_stats_dict[pid] = player_stat_data | player_stats_dict[pid]                    else:                        player_stats_dict[pid] = player_stat_data                    player_stats = list(player_stats_dict.values())    game_stats = list(game_stats_dict.values())        return game_meta, game_stats, player_data, player_stats, team_datadef get_dirs(dir):    return [name for name in os.listdir(dir) if os.path.isdir(os.path.join(dir, name))]#%%folder = BASDIR+'games/'files = ['20141010']#sorted(os.listdir(folder))seen_players = set()seen_teams = set()master_player_data = []master_player_stats = []master_team_data = []master_game_data = []master_game_stats = []for date in files:    games = get_dirs(os.path.join(folder, date))    for game in games:        path = os.path.join(folder,date,game)        game_meta, game_stats, player_data, player_stats, team_data = parse_dumped_game_data(path, date, game)                for pdata in player_data:            if not pdata['player_id'] in seen_players:                master_player_data.append(pdata)                seen_players.add(pdata['player_id'])                        for tdata in team_data:            if not tdata['team_id'] in seen_teams:                master_team_data.append(tdata)                seen_teams.add(tdata['team_id'])                master_player_stats.extend(player_stats)        master_game_stats.extend(game_stats)        master_game_data.append(game_meta)        #%%x = pd.DataFrame(master_game_stats)#%%x.columns#%%pd.DataFrame([])#%%def time_to_minutes(time_string):    x = list(map(int, time_string.split(':')))    if len(x) == 2:        total_seconds = x[0] * 60 + x[1]    else:        total_seconds = abs(x[0]) * 60    return total_seconds / 60#%%time_to_minutes('240:00')#%%def get_game_data(game, date, game_id):    return {        'game_id':game_id,        'season':game['meta']['season_yr'],        'season_type':game['meta']['season_type'],        'dint':date,        'date':datetime.strptime(str(date), '%Y%m%d'),        'home_team':game['home']['teamId'],        'away_team':game['away']['teamId'],        'home_score':game['home']['score'],        'away_score':game['away']['score']    }def get_team_data(team):    return {        'team_id':team['teamId'],        'team_name':team['teamName'],        'team_slug':team['teamTricode']    }def get_player_data(player):    return {        'player_id':player['personId'],        'player_name':player['firstName']+' '+player['familyName'],        'player_slug':player['playerSlug']    }def get_stats_data(stats, game_id, player_id, position):    return {        'player_id':player_id,        'game_id':game_id,        'position':position,        **stats    }#%%def bad_game(game):    if 'home' in game and game['home'] and 'away' in game and game['away']:        return False      return Truedef time_to_minutes(time_string):    x = list(map(int, time_string.split(':')))    if len(x) == 2:        total_seconds = min(x[0] * 60 + x[1], 48*60)    else:        total_seconds = min(abs(x[0])*60, 48*60)            return total_seconds/60#%%games = []teams = []folder = BASDIR+'games/'files = os.listdir(folder)for fname in files:    fpath = os.path.join(folder+fname)    if not os.path.isfile(fpath):        continue        j = json.load(open(fpath,'r'))    date = fpath.split('_')[0].split('/')[-1]        for game_id in list(j.keys()):            game = j[game_id]                if bad_game(game):            continue                gdata = get_game_data(game,date,game_id)        hdata = get_team_data(game['home'])        adata = get_team_data(game['away'])                games.append(gdata)        teams.extend([hdata,adata])    #%%game_table = pd.DataFrame(games).drop_duplicates()team_table = pd.DataFrame(teams).drop_duplicates()game_table = game_table.replace('', np.nan)team_table = team_table.replace('', np.nan)#%%folder = BASDIR+'stats/'files = os.listdir(folder)players = []stats = []for fname in files:    fpath = os.path.join(folder+fname)    if not os.path.isfile(fpath):        continue        j = json.load(open(fpath,'r'))    game_id = j['gameId']        hteam = j['homeTeam']['players']    ateam = j['awayTeam']['players']    teams = [hteam, ateam]        for team in teams:        for player in team:            pdata = get_player_data(player)            if 'statistics' not in player:                continue                        sdata = get_stats_data(player['statistics'], game_id, pdata['player_id'], player['position'])            players.append(pdata)            stats.append(sdata)    #%%player_table = pd.DataFrame(players).drop_duplicates()stats_table = pd.DataFrame(stats).drop_duplicates()player_table = player_table.replace('', np.nan)stats_table = stats_table.replace('', np.nan)#%%stats_table = stats_table[~stats_table.minutes.isna()]stats_table['minutes'] = stats_table.minutes.apply(time_to_minutes)stats_table = stats_table[stats_table.minutes > 0]#%%db_path = '/Users/rowanlavelle/nba/nba.db'engine = create_engine(f'sqlite:///{db_path}')#game_table.to_sql('games', con=engine, index=False, if_exists='replace')#team_table.to_sql('teams', con=engine, index=False, if_exists='replace')#player_table.to_sql('players', con=engine, index=False, if_exists='replace')#stats_table.to_sql('stats', con=engine, index=False, if_exists='replace')#%%q = 'select * from stats'df = pd.read_sql_query(q, engine)#%%# Table name for which you want to get the schematable_name = 'games'# Query to retrieve the schemaquery = f"PRAGMA table_info({table_name})"# Execute query and load data into DataFrameschema_df = pd.read_sql_query(query, engine)schema_df#%%dbm = DBManager(engine)#%%x = dbm.get_teams_season('2022-23', '00')#%%y = dbm.get_player_stats_season('lebron-james', '00')#%%x = dbm.get_players()#%%len(x), x.player_id.nunique()#%%counter = x.groupby(['player_id']).player_slug.nunique()#%%x[x.player_id==1630602]#%%x['key'] = x.team_id.astype(str) + x.team_name + x.team_slug#%%len(x), x.key.nunique(), x.team_slug.nunique(), x.team_name.nunique(), x.team_id.nunique()#%%len(x), x.player_id.nunique()#%%query = """            SELECT t.team_id, t.team_name, t.team_slug, recent_games.max_date AS most_recent_game_date            FROM teams t            JOIN (                SELECT MAX(g.date) AS max_date,                        CASE                            WHEN g.home_team = teams.team_id THEN g.home_team                           ELSE g.away_team                       END AS team_id,                       CASE                            WHEN g.home_team = teams.team_id THEN (SELECT team_slug FROM teams WHERE team_id = g.home_team)                           ELSE (SELECT team_slug FROM teams WHERE team_id = g.away_team)                       END AS team_slug,                       (SELECT team_name FROM teams WHERE team_id =                             CASE                                 WHEN g.home_team = teams.team_id THEN g.home_team                                ELSE g.away_team                            END) AS team_name                FROM games g                JOIN teams ON g.home_team = teams.team_id OR g.away_team = teams.team_id                GROUP BY team_id, team_name            ) AS recent_games            ON t.team_id = recent_games.team_id            JOIN games g            ON (g.home_team = t.team_id OR g.away_team = t.team_id)            AND g.date = recent_games.max_date            WHERE t.team_slug = recent_games.team_slug            AND t.team_name = recent_games.team_name;        """#%%df = pd.read_sql_query(query, engine)#%%tmp = game_table[game_table.season_type == 'Regular Season']#%%tmp['key'] = tmp.date.astype(str) + tmp.home_team.astype(str) + tmp.away_team.astype(str)#%%tmp = tmp.groupby(['season']).key.nunique()#%%game_table.columns#%%tmp = pd.merge(player_table, stats_table, on='player_id')tmp = pd.merge(game_table[['game_id', 'dint', 'season_type', 'season']], tmp)#%%jt = tmp[tmp.player_slug == 'lebron-james']#%%jt = jt[jt.season_type =='Regular Season']#%%jt.points.sum()#%%#%%x = jt.groupby(['season'])[['points', 'minutes']].mean()#%%stats_table['flag'] = stats_table.minutes.apply(lambda s: len(s.split(':')) ==1 )#%%s = stats_table[stats_table.flag]#%%np.quantile(stats_table.minutes, [0,0.25,0.5,0.75,1])#%%s = stats_table[stats_table.position.isna()]#%%import syssys.path.append('/Users/rowanlavelle/Documents/Projects/')#%%from nba.src.db_manager import DBManager#%%dbm = DBManager(engine)#%%x = dbm.get_players()#%%y = dbm.get_team_games_season('Celtics', '00', '2022-23')#%%y = dbm.get_player_stats_season('lebron-james', '00')#%%y['ppm'] = y.points / y.minutes#%%np.mean(y.points), np.std(y.points) / np.mean(y.points)#%%np.mean(y.ppm), np.std(y.ppm) / np.mean(y.ppm)#%%mu_ppm = np.mean(y.ppm)#%%y['points_estimate'] = mu_ppm * y.minutes#%%y['err'] = y.points - y.points_estimate#%%np.sum(y.err ** 2)#%%x = y.groupby(['season']).err.apply(lambda e: np.sum(e**2)).reset_index(drop=False)#%%