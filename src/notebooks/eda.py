#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul 31 23:08:12 2025

@author: rowanlavelle

weird corr found with bug in bayesian code (not cheating, just does not make sense)
 - if you use the previous games {f} 
     and weight it at the current game in the season,
     assume strong prior built on the previos season you get strong signal...
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_theme()
%matplotlib auto

from src.db.db_manager import DBManager
from src.modeling_framework.framework.dataloader import NBADataLoader
from src.types.player_types import PlayerType, PLAYER_FEATURES
from src.feature_engineering.bayes_posterior import BayesPosteriorFeature
from src.feature_engineering.moving_avg import CumSeasonAvgFeature, ExponentialMovingAvgFeature, CumSeasonEMAFeature, SimpleMovingAvgFeature
from src.feature_engineering.base import FeaturePipeline
from src.feature_engineering.player_streak import PlayerHotStreakFeature
from src.feature_engineering.last_game_value import LastGameValueFeature

#%%
data_loader = NBADataLoader()
data_loader.load_data()

#%%
tmp = data_loader.get_player_type(ptypes=[PlayerType.STARTER])

#%%
x = tmp.copy()
x = x[~x.spread.isna()].copy()
x = x.drop(columns=['position'])
x = x.dropna()
x = x.sort_values(by=['player_id', 'season', 'date'])

for f in PLAYER_FEATURES:
    print(f)
    features = [
        ExponentialMovingAvgFeature(span=7, source_col=f),
        ExponentialMovingAvgFeature(span=5, source_col=f),
        CumSeasonAvgFeature(source_col=f),
        CumSeasonEMAFeature(source_col=f),
        SimpleMovingAvgFeature(window=3, source_col=f),
        SimpleMovingAvgFeature(window=5, source_col=f),
        LastGameValueFeature(source_col=f)
    ]
    
    dependents = []
    for feature in features:
        # can this be an optimization problem? best combo of bayes / hot with simple features
        dependents.append(BayesPosteriorFeature(ybar_col=feature.feature_name,
                                                source_col=f))
        
        if '3g' not in feature.feature_name: 
            dependents.append(PlayerHotStreakFeature(comp_col=feature.feature_name,
                                                     source_col=f))
    features.extend(dependents)
    pipeline = FeaturePipeline(features)
    x = pipeline.transform(x)

x = x.dropna()
x = x[x['season'] > x['season'].min()].copy()
x.season.unique()

results = []

for target_feature in PLAYER_FEATURES:
    # Get all feature columns generated by the pipeline for this source column
    feature_cols = [col for col in x.columns 
                   if col.startswith(target_feature) and col != target_feature and '_' in col]
    
    # Calculate correlation for each derived feature
    for feature_col in feature_cols:
        def calc_corr(group):
            return np.corrcoef(group[feature_col], group['points'])[0, 1]
        
        # Calculate mean correlation across all players
        mean_corr = x.groupby('player_id').apply(calc_corr, include_groups=False).mean()
        
        results.append({
            'source_column': target_feature,
            'feature_type': '_'.join(feature_col.split('_')[-2:]),
            'feature_name': feature_col,
            'mean_correlation': mean_corr
        })

# Convert to DataFrame and sort by correlation strength
correlation_results = (
    pd.DataFrame(results)
    .sort_values('mean_correlation', key=abs, ascending=False)
    .reset_index(drop=True)
)

#%%
t = correlation_results[correlation_results.mean_correlation > 0.1].copy()
t = t.sort_values(by=['source_column', 'mean_correlation'], ascending=False)

#%%
z = x[x.player_slug == 'james-harden'].copy()
z = z[z.season=='2024-25']
z = z[['player_id', 'game_id', 'season', 'date', 'points', 'points_sma_3']]

#%%
